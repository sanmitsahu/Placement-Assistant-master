<li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques0"><strong>Question 1. Describe The Different Roles Of Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>In HTTP, there are two different roles: server and client. In general, the client always initiates the conversation; the server replies. HTTP is text based; that is, messages are essentially bits of text, although the message body can also contain other media. Text usage makes it easy to monitor an HTTP exchange.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques1"><strong>Question 2. What Is The Mean Of Get?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>GET is the simplest type of HTTP request method; the one that browsers use each time you click a link or type a URL into the address bar. It instructs the server to transmit the data identified by the URL to the client. Data should never be modified on the server side as a result of a GET request. In this sense, a GET request is read-only, but of course, once the client receives the data, it is free to do any operation with it on its own side - for instance, format it for display.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques2"><strong>Question 3. What Are Response Codes In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>HTTP response codes standardize a way of informing the client about the result of its request.</p>
<p>You might have noticed that the example application uses the PHP header(), passing some strange looking strings as arguments. The header() function prints the HTTP headers and ensures that they are formatted appropriately. Headers should be the first thing on the response, so you shouldn't output anything else before you are done with the headers. Sometimes, your HTTP server may be configured to add other headers, in addition to those you specify in your code.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques3"><strong>Question 4. What Are Status Codes In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>In HTTP/1.0 and since, the first line of the HTTP response is called the status line and includes a numeric status code (such as "404") and a textual reason phrase (such as "Not Found"). The way the user agent handles the response primarily depends on the code and secondarily on the response headers.</p>
<p>Custom status codes can be used since, if the user agent encounters a code it does not recognize, it can use the first digit of the code to determine the general class of the response.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques4"><strong>Question 5. Explain About Persistent Connections?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>In HTTP/0.9 and 1.0, the connection is closed after a single request/response pair. In HTTP/1.1 a keep-alive-mechanism was introduced, where a connection could be reused for more than one request.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques5"><strong>Question 6. Explain Secure Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>There are currently two methods of establishing a secure HTTP connection: the https URI scheme and the HTTP 1.1 Upgrade header, introduced by RFC 2817. Browser support for the Upgrade header is, however, nearly non-existent, so HTTPS is still the dominant method of establishing a secure HTTP connection. Secure HTTP is notated by the prefix https:// instead of http:// on web URIs.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques6"><strong>Question 7. Explain Request Message In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p><strong>The request message consists of the following:</strong></p>
<ul>
<li>Request line, such as GET /images/logo.png HTTP/1.1, which requests a resource called /images/logo.png from server</li>
<li>Headers, such as Accept-Language: en</li>
<li>An empty line</li>
<li>An optional message body</li>
</ul>
<p>The request line and headers must all end with &lt;CR&gt;&lt;LF&gt; (that is, a carriage return followed by a line feed). The empty line must consist of only &lt;CR&gt;&lt;LF&gt; and no other white-space. In the HTTP/1.1 protocol, all headers except Host are optional.</p>
<p>A request line containing only the path name is accepted by servers to maintain compatibility with HTTP clients before the HTTP/1.0 specification in RFC1945.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques7"><strong>Question 8. Tell Me What Is Http Session State?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>HTTP is a stateless protocol. A stateless protocol does not require the server to retain information or status about each user for the duration of multiple requests. For example, when a web server is required to customize the content of a web page for a user, the web application may have to track the user's progress from page to page. A common solution is the use of HTTP cookies. Other methods include server side sessions, hidden variables (when the current page is a form), and URL-rewriting using URI-encoded parameters, e.g., /index.php?session_id=some_unique_session_code.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques8"><strong>Question 9. What Is Idempotent Methods And Web Applications?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>Methods PUT and DELETE are defined to be idempotent, meaning that multiple identical requests should have the same effect as a single request. Methods GET, HEAD, OPTIONS and TRACE, being prescribed as safe, should also be idempotent, as HTTP is a stateless protocol.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques9"><strong>Question 10. Tell Me What Happens To An Undeliverable Datagram?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>An undeliverable datagram is discarded and an ICMP error message is sent to the source host.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques10"><strong>Question 11. Explain Ip Is A Best-effort Protocol In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>IP is a best-effort protocol, because it will make every effort to always transmit a datagram and also datagrams will not be just discarded. However, the delivery of the datagram to the destination is not guaranteed.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques11"><strong>Question 12. Tell Me What Do You Mean By Ip Is An Unreliable Protocol?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>IP is a unreliable protocol because it does not guarantee the delivery of a data-gram to its destination. The reliability must be provided by the upper layer protocols like TCP. IP does not support flow control, re-transmission, acknowledgement and error recovery.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques12"><strong>Question 13. Tell Me To Which Osi Layer Does Ip Belong?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>IP belongs to the Network Layer (layer 3) in the OSI model.</p>
<p>internet protocol is working in network layer of osi model in congection with tcp tx layer protocol.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques13"><strong>Question 14. What Is The Mean Of Put?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>A PUT request is used when you wish to create or update the resource identified by the URL.</p>
<p><strong>For example,</strong></p>
<p>1 PUT /clients/robin</p>
<p>might create a client, called Robin on the server. You will notice that REST is completely backend agnostic; there is nothing in the request that informs the server how the data should be created - just that it should. This allows you to easily swap the backend technology if the need should arise. PUT requests contain the data to use in updating or creating the resource in the body. In cURL, you can add data to the request with the -d switch.</p>
<p>1 curl -v -X PUT -d "some text"</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques14"><strong>Question 15. What Is The Mean Of 500 Internal Server Error Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>When all else fails; generally, a 500 response is used when processing fails due to unanticipated circumstances on the server side, which causes the server to error out.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques15"><strong>Question 16. What Is The Mean Of 409 Conflict Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>This indicates a conflict. For instance, you are using a PUT request to create the same resource twice.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques16"><strong>Question 17. What Is The Mean Of 405 Method Not Allowed Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>The HTTP method used is not supported for this resource.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques17"><strong>Question 18. What Is The Mean Of 401 Unauthorized Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>This error indicates that you need to perform authentication before accessing the resource.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques18"><strong>Question 19. What Is The Mean Of 404 Not Found Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>This response indicates that the required resource could not be found. This is generally returned to all requests which point to a URL with no corresponding resource.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques19"><strong>Question 20. What Is The Mean Of 400 Bad Request Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>The request was malformed. This happens especially with POST and PUT requests, when the data does not pass validation, or is in the wrong format.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques20"><strong>Question 21. What Is The Mean Of 201 Created Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>This indicates the request was successful and a resource was created. It is used to confirm success of a PUT or POST request.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques21"><strong>Question 22. What Is 200 Ok Http Response Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>This response code indicates that the request was successful.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques22"><strong>Question 23. What Is Http Client Libraries?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>cURL is, more often than not, the HTTP client solution of choice for PHP developers.</p>
<p>To experiment with the different request methods, you need a client, which allows you to specify which method to use. Unfortunately, HTML forms do not fit the bill, as they only allow you to make GET and POST requests. In real life, APIs are accessed programmatically through a separate client application, or through JavaScript in the browser.</p>
<p>This is the reason why, in addition to the server, it is essential to have good HTTP client capabilities available in your programming language of choice.</p>
<p>A very popular HTTP client library is, again, cURL. You've already been familiarized with the cURL command from earlier in this tutorial. cURL includes both a standalone command line program, and a library that can be used by various programming languages. In particular, cURL is, more often than not, the HTTP client solution of choice for PHP developers. Other languages, such as Python, offer more native HTTP client libraries.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques23"><strong>Question 24. What Is Representations In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>The HTTP client and HTTP server exchange information about resources identified by URLs.</p>
<p>We can sum up what we have learned so far in the following way: the HTTP client and HTTP server exchange information about resources identified by URLs.</p>
<p>We say that the request and response contain a representation of the resource. By representation, we mean information, in a certain format, about the state of the resource or how that state should be in the future. Both the header and the body are pieces of the representation.</p>
<p>The HTTP headers, which contain metadata, are tightly defined by the HTTP spec; they can only contain plain text, and must be formatted in a certain manner.</p>
<p>The body can contain data in any format, and this is where the power of HTTP truly shines. You know that you can send plain text, pictures, HTML, and XML in any human language. Through request metadata or different URLs, you can choose between different representations for the same resource. For example, you might send a webpage to browsers and JSON to applications.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques24"><strong>Question 25. What Is Idempotent Methods In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>These methods achieve the same result, no matter how many times the request is repeated: they are GET, PUT, and DELETE. The only non idempotent method is POST. PUT and DELETE being considered idempotent might be surprising, though, it, in fact, is quite easy to explain: repeating a PUT method with exactly the same body should modify a resource in a way that it remains identical to the one described in the previous PUT request: nothing will change! Similarly, it makes no sense to delete a resource twice. It follows that no matter how many times a PUT or DELETE request is repeated, the result should be the same as if it had been done only once.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques25"><strong>Question 26. What Are The Safe And Unsafe Methods Of Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>safe methods are those that never modify resources. The only safe methods, from the four listed above, is GET. The others are unsafe, because they may result in a modification of the resources.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques26"><strong>Question 27. For What Purposes Post Is Used?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>POST is used when the processing you wish to happen on the server should be repeated, if the POST request is repeated (that is, they are not idempotent; more on that below). In addition, POST requests should cause processing of the request body as a subordinate of the URL you are posting to.</p>
<p><strong>In plain words:</strong></p>
<p>1 POST /clients/</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques27"><strong>Question 28. Described The Most Important Http Verbs?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>If you've ever created HTML forms, you'll be familiar with two of the most important HTTP verbs: GET and POST. But there are far more HTTP verbs available. The most important ones for building Restful API are GET, POST, PUT and DELETE. Other methods are available, such as HEAD and OPTIONS, but they are more rare (if you want to know about all other HTTP methods, the official source is IETF).</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques28"><strong>Question 29. What Are The Mean Of Http Verbs?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>HTTP verbs tell the server what to do with the data identified by the URL.</p>
<p>HTTP verbs tell the server what to do with the data identified by the URL. The request can optionally contain additional information in its body, which might be required to perform the operation - for instance, data you want to store with the resource. You can supply this data in cURL with the -d option.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques29"><strong>Question 30. What Is The Mean Of Urls In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>URLs are how you identify the things that you want to operate on. We say that each URL identifies a resource. These are exactly the same URLs which are assigned to web pages. In fact, a web page is a type of resource.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques30"><strong>Question 31. What Is Curl In Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>cURL is a command line tool that is available on all major operating systems.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques31"><strong>Question 32. From What Http Messages Are Made?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>HTTP messages are made of a header and a body. The body can often remain empty; it contains data that you want to transmit over the network, in order to use it according to the instructions in the header. The header contains metadata, such as encoding information; but, in the case of a request, it also contains the important HTTP methods. In the REST style, you will find that header data is often more significant than the body.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques32"><strong>Question 33. What Is Https Uri Scheme?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>https is a URI scheme that is, aside from the scheme token, syntactically identical to the http scheme used for normal HTTP connections, but which signals the browser to use an added encryption layer of SSL/TLS to protect the traffic. SSL is especially suited for HTTP since it can provide some protection even if only one side of the communication is authenticated. This is the case with HTTP transactions over the Internet, where typically only the server is authenticated</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques33"><strong>Question 34. What Is Secure Http?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>There are currently two methods of establishing a secure HTTP connection: the https URI scheme and the HTTP 1.1 Upgrade header, introduced by RFC 2817. Browser support for the Upgrade header is, however, nearly non-existent, so HTTPS is still the dominant method of establishing a secure HTTP connection. Secure HTTP is notated by the prefix https:// instead of http:// on web URIs.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques34"><strong>Question 35. What Is Http Session State?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>HTTP is a stateless protocol. A stateless protocol does not require the server to retain information or status about each user for the duration of multiple requests. For example, when a web server is required to customize the content of a web page for a user, the web application may have to track the user's progress from page to page. A common solution is the use of HTTP cookies. Other methods include server side sessions, hidden variables (when the current page is a form), and URL-rewriting using URI-encoded parameters, e.g., /index.php?session_id=some_unique_session_code.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques35"><strong>Question 36. What Is Persistent Connections?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>In HTTP/0.9 and 1.0, the connection is closed after a single request/response pair. In HTTP/1.1 a keep-alive-mechanism was introduced, where a connection could be reused for more than one request.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques36"><strong>Question 37. What Is Status Codes?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>In HTTP/1.0 and since, the first line of the HTTP response is called the status line and includes a numeric status code (such as "404") and a textual reason phrase (such as "Not Found"). The way the user agent handles the response primarily depends on the code and secondarily on the response headers.</p>
<p>Custom status codes can be used since, if the user agent encounters a code it does not recognize, it can use the first digit of the code to determine the general class of the response.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques37"><strong>Question 38. Explain Idempotent Methods And Web Applications?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>Methods PUT and DELETE are defined to be idempotent, meaning that multiple identical requests should have the same effect as a single request. Methods GET, HEAD, OPTIONS and TRACE, being prescribed as safe, should also be idempotent, as HTTP is a stateless protocol.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques38"><strong>Question 39. Explain Safe Methods?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>Some methods (for example, HEAD, GET, OPTIONS and TRACE) are defined as safe, which means they are intended only for information retrieval and should not change the state of the server. In other words, they should not have side effects, beyond relatively harmless effects such as logging, caching, the serving of banner advertisements or incrementing a web counter. Making arbitrary GET requests without regard to the context of the application's state should therefore be considered safe.</p>
<p>By contrast, methods such as POST, PUT and DELETE are intended for actions which may cause side effects either on the server, or external side effects such as financial transactions or transmission of email. Such methods are therefore not usually used by conforming web robots or web crawlers, which tend to make requests without regard to context or consequences.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques39"><strong>Question 40. What Are Request Methods?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p><strong>HEAD: </strong>Asks for the response identical to the one that would correspond to a GET request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.</p>
<p><strong>GET: </strong>Requests a representation of the specified resource. Requests using GET (and a few other HTTP methods) "SHOULD NOT have the significance of taking an action other than retrieval". The W3C has published guidance principles on this distinction, saying, "Web application design should be informed by the above principles, but also by the relevant limitations." See safe methods below.</p>
<p><strong>POST: </strong>Submits data to be processed (e.g., from an HTML form) to the identified resource. The data is included in the body of the request. This may result in the creation of a new resource or the updates of existing resources or both.</p>
<p><strong>PUT: </strong>Uploads a representation of the specified resource.</p>
<p><strong>DELETE: </strong>Deletes the specified resource.</p>
<p><strong>TRACE: </strong>Echoes back the received request, so that a client can see what (if any) changes or additions have been made by intermediate servers.</p>
<p><strong>OPTIONS: </strong>Returns the HTTP methods that the server supports for specified URL. This can be used to check the functionality of a web server by requesting '*' instead of a specific resource.</p>
<p><strong>CONNECT: </strong>Converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</p>
<p><strong>PATCH: </strong>Is used to apply partial modification</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques40"><strong>Question 41. What Is A Request Message?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p><strong>The request message consists of the following:</strong></p>
<ul>
<li>Request line, such as GET /images/logo.png HTTP/1.1, which requests a resource called /images/logo.png from server</li>
<li>Headers, such as Accept-Language: en</li>
<li>An empty line</li>
<li>An optional message body</li>
</ul>
<p>The request line and headers must all end with &lt;CR&gt;&lt;LF&gt; (that is, a carriage return followed by a line feed). The empty line must consist of only &lt;CR&gt;&lt;LF&gt; and no other whitespace. In the HTTP/1.1 protocol, all headers except Host are optional.</p>
<p>A request line containing only the path name is accepted by servers to maintain compatibility with HTTP clients before the HTTP/1.0 specification in RFC1945.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques41"><strong>Question 42. What Is Http Session?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p>HTTP session is a sequence of network request-response transactions. An HTTP client initiates a request. It establishes a Transmission Control Protocol (TCP) connection to a particular port on a host (typically port 80; see List of TCP and UDP port numbers). An HTTP server listening on that port waits for a client's request message. Upon receiving the request, the server sends back a status line, such as "HTTP/1.1 200 OK", and a message of its own, the body of which is perhaps the requested resource, an error message, or some other information.</p></p>
</li><br><br><li class="quesans mb-20">
<p><a class="accordion-trigger ques" id="ques42"><strong>Question 43. What Is Hypertext Transfer Protocol (http)?</strong></a></p>
<p><span class="ans"><strong>Answer :</strong></span><p> Hypertext Transfer Protocol (HTTP) is a networking protocol for distributed, collaborative, hypermedia information systems. HTTP is the foundation of data communication for the World Wide Web.</p>
<p>The standards development of HTTP has been coordinated by the Internet Engineering Task Force (IETF) and the World Wide Web Consortium, culminating in the publication of a series of Requests for Comments (RFCs), most notably RFC 2616 (June 1999), which defines HTTP/1.1, the version of HTTP in common use.</p></p>
</li><br><br>